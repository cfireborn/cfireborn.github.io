/**
 * cremebrulee
 * Your custom SDK
 *
 * The version of the OpenAPI document: cremebrulee: v1 SDK
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient.js';

/**
 * The AnalyticsServiceCreateUserEventBody model module.
 * @module snapser-apis/AnalyticsServiceCreateUserEventBody
 * @version cremebrulee: v1 SDK
 */
class AnalyticsServiceCreateUserEventBody {
    /**
     * Constructs a new <code>AnalyticsServiceCreateUserEventBody</code>.
     * @alias module:snapser-apis/AnalyticsServiceCreateUserEventBody
     * @param userId {String} UserID of the affected user
     */
    constructor(userId) { 
        
        AnalyticsServiceCreateUserEventBody.initialize(this, userId);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, userId) { 
        obj['user_id'] = userId;
    }

    /**
     * Constructs a <code>AnalyticsServiceCreateUserEventBody</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:snapser-apis/AnalyticsServiceCreateUserEventBody} obj Optional instance to populate.
     * @return {module:snapser-apis/AnalyticsServiceCreateUserEventBody} The populated <code>AnalyticsServiceCreateUserEventBody</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new AnalyticsServiceCreateUserEventBody();

            if (data.hasOwnProperty('created_at')) {
                obj['created_at'] = ApiClient.convertToType(data['created_at'], 'Number');
            }
            if (data.hasOwnProperty('properties')) {
                obj['properties'] = ApiClient.convertToType(data['properties'], {'String': 'String'});
            }
            if (data.hasOwnProperty('time_offset')) {
                obj['time_offset'] = ApiClient.convertToType(data['time_offset'], 'Number');
            }
            if (data.hasOwnProperty('user_id')) {
                obj['user_id'] = ApiClient.convertToType(data['user_id'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>AnalyticsServiceCreateUserEventBody</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>AnalyticsServiceCreateUserEventBody</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of AnalyticsServiceCreateUserEventBody.RequiredProperties) {
            if (!data[property]) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['user_id'] && !(typeof data['user_id'] === 'string' || data['user_id'] instanceof String)) {
            throw new Error("Expected the field `user_id` to be a primitive type in the JSON string but got " + data['user_id']);
        }

        return true;
    }


}

AnalyticsServiceCreateUserEventBody.RequiredProperties = ["user_id"];

/**
 * Epoch timestamp of event in seconds, if this and offset are not provided, it will be the request time
 * @member {Number} created_at
 */
AnalyticsServiceCreateUserEventBody.prototype['created_at'] = undefined;

/**
 * Key value pairs of the properties
 * @member {Object.<String, String>} properties
 */
AnalyticsServiceCreateUserEventBody.prototype['properties'] = undefined;

/**
 * Time offset in seconds with server time
 * @member {Number} time_offset
 */
AnalyticsServiceCreateUserEventBody.prototype['time_offset'] = undefined;

/**
 * UserID of the affected user
 * @member {String} user_id
 */
AnalyticsServiceCreateUserEventBody.prototype['user_id'] = undefined;






export default AnalyticsServiceCreateUserEventBody;

