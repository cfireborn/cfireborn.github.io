/**
 * cremebrulee
 * Your custom SDK
 *
 * The version of the OpenAPI document: cremebrulee: v1 SDK
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient.js';

/**
 * The ExperimentsUserExperiment model module.
 * @module snapser-apis/ExperimentsUserExperiment
 * @version cremebrulee: v1 SDK
 */
class ExperimentsUserExperiment {
    /**
     * Constructs a new <code>ExperimentsUserExperiment</code>.
     * @alias module:snapser-apis/ExperimentsUserExperiment
     */
    constructor() { 
        
        ExperimentsUserExperiment.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ExperimentsUserExperiment</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:snapser-apis/ExperimentsUserExperiment} obj Optional instance to populate.
     * @return {module:snapser-apis/ExperimentsUserExperiment} The populated <code>ExperimentsUserExperiment</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ExperimentsUserExperiment();

            if (data.hasOwnProperty('assigned_variant')) {
                obj['assigned_variant'] = ApiClient.convertToType(data['assigned_variant'], 'String');
            }
            if (data.hasOwnProperty('audience_evaluated')) {
                obj['audience_evaluated'] = ApiClient.convertToType(data['audience_evaluated'], 'Boolean');
            }
            if (data.hasOwnProperty('excluded_for')) {
                obj['excluded_for'] = ApiClient.convertToType(data['excluded_for'], 'String');
            }
            if (data.hasOwnProperty('experiment_name')) {
                obj['experiment_name'] = ApiClient.convertToType(data['experiment_name'], 'String');
            }
            if (data.hasOwnProperty('in_audience')) {
                obj['in_audience'] = ApiClient.convertToType(data['in_audience'], 'Boolean');
            }
            if (data.hasOwnProperty('in_ramp')) {
                obj['in_ramp'] = ApiClient.convertToType(data['in_ramp'], 'Boolean');
            }
            if (data.hasOwnProperty('is_override')) {
                obj['is_override'] = ApiClient.convertToType(data['is_override'], 'Boolean');
            }
            if (data.hasOwnProperty('ramp_roll')) {
                obj['ramp_roll'] = ApiClient.convertToType(data['ramp_roll'], 'Number');
            }
            if (data.hasOwnProperty('state')) {
                obj['state'] = ApiClient.convertToType(data['state'], 'String');
            }
            if (data.hasOwnProperty('treatment')) {
                obj['treatment'] = ApiClient.convertToType(data['treatment'], 'String');
            }
            if (data.hasOwnProperty('user_id')) {
                obj['user_id'] = ApiClient.convertToType(data['user_id'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ExperimentsUserExperiment</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ExperimentsUserExperiment</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['assigned_variant'] && !(typeof data['assigned_variant'] === 'string' || data['assigned_variant'] instanceof String)) {
            throw new Error("Expected the field `assigned_variant` to be a primitive type in the JSON string but got " + data['assigned_variant']);
        }
        // ensure the json data is a string
        if (data['excluded_for'] && !(typeof data['excluded_for'] === 'string' || data['excluded_for'] instanceof String)) {
            throw new Error("Expected the field `excluded_for` to be a primitive type in the JSON string but got " + data['excluded_for']);
        }
        // ensure the json data is a string
        if (data['experiment_name'] && !(typeof data['experiment_name'] === 'string' || data['experiment_name'] instanceof String)) {
            throw new Error("Expected the field `experiment_name` to be a primitive type in the JSON string but got " + data['experiment_name']);
        }
        // ensure the json data is a string
        if (data['state'] && !(typeof data['state'] === 'string' || data['state'] instanceof String)) {
            throw new Error("Expected the field `state` to be a primitive type in the JSON string but got " + data['state']);
        }
        // ensure the json data is a string
        if (data['treatment'] && !(typeof data['treatment'] === 'string' || data['treatment'] instanceof String)) {
            throw new Error("Expected the field `treatment` to be a primitive type in the JSON string but got " + data['treatment']);
        }
        // ensure the json data is a string
        if (data['user_id'] && !(typeof data['user_id'] === 'string' || data['user_id'] instanceof String)) {
            throw new Error("Expected the field `user_id` to be a primitive type in the JSON string but got " + data['user_id']);
        }

        return true;
    }


}



/**
 * @member {String} assigned_variant
 */
ExperimentsUserExperiment.prototype['assigned_variant'] = undefined;

/**
 * @member {Boolean} audience_evaluated
 */
ExperimentsUserExperiment.prototype['audience_evaluated'] = undefined;

/**
 * @member {String} excluded_for
 */
ExperimentsUserExperiment.prototype['excluded_for'] = undefined;

/**
 * @member {String} experiment_name
 */
ExperimentsUserExperiment.prototype['experiment_name'] = undefined;

/**
 * @member {Boolean} in_audience
 */
ExperimentsUserExperiment.prototype['in_audience'] = undefined;

/**
 * @member {Boolean} in_ramp
 */
ExperimentsUserExperiment.prototype['in_ramp'] = undefined;

/**
 * @member {Boolean} is_override
 */
ExperimentsUserExperiment.prototype['is_override'] = undefined;

/**
 * @member {Number} ramp_roll
 */
ExperimentsUserExperiment.prototype['ramp_roll'] = undefined;

/**
 * @member {String} state
 */
ExperimentsUserExperiment.prototype['state'] = undefined;

/**
 * not actually persisted. Set when asked for.
 * @member {String} treatment
 */
ExperimentsUserExperiment.prototype['treatment'] = undefined;

/**
 * @member {String} user_id
 */
ExperimentsUserExperiment.prototype['user_id'] = undefined;






export default ExperimentsUserExperiment;

