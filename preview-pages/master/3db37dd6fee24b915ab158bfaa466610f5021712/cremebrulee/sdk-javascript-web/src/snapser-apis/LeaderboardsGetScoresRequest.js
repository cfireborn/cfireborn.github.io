/**
 * cremebrulee
 * Your custom SDK
 *
 * The version of the OpenAPI document: cremebrulee: v1 SDK
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient.js';

/**
 * The LeaderboardsGetScoresRequest model module.
 * @module snapser-apis/LeaderboardsGetScoresRequest
 * @version cremebrulee: v1 SDK
 */
class LeaderboardsGetScoresRequest {
    /**
     * Constructs a new <code>LeaderboardsGetScoresRequest</code>.
     * @alias module:snapser-apis/LeaderboardsGetScoresRequest
     * @param count {Number} Number of rankings to be displayed
     * @param leaderboardName {String} Name of the leaderboard
     * @param range {module:snapser-apis/LeaderboardsGetScoresRequest.RangeEnum} Range of the leaderboard requested: 'top', 'bottom' or 'around' the user specified
     */
    constructor(count, leaderboardName, range) { 
        
        LeaderboardsGetScoresRequest.initialize(this, count, leaderboardName, range);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, count, leaderboardName, range) { 
        obj['count'] = count;
        obj['leaderboard_name'] = leaderboardName;
        obj['range'] = range;
    }

    /**
     * Constructs a <code>LeaderboardsGetScoresRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:snapser-apis/LeaderboardsGetScoresRequest} obj Optional instance to populate.
     * @return {module:snapser-apis/LeaderboardsGetScoresRequest} The populated <code>LeaderboardsGetScoresRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new LeaderboardsGetScoresRequest();

            if (data.hasOwnProperty('count')) {
                obj['count'] = ApiClient.convertToType(data['count'], 'Number');
            }
            if (data.hasOwnProperty('leaderboard_name')) {
                obj['leaderboard_name'] = ApiClient.convertToType(data['leaderboard_name'], 'String');
            }
            if (data.hasOwnProperty('offset')) {
                obj['offset'] = ApiClient.convertToType(data['offset'], 'Number');
            }
            if (data.hasOwnProperty('range')) {
                obj['range'] = ApiClient.convertToType(data['range'], 'String');
            }
            if (data.hasOwnProperty('user_id')) {
                obj['user_id'] = ApiClient.convertToType(data['user_id'], 'String');
            }
            if (data.hasOwnProperty('with_metadata')) {
                obj['with_metadata'] = ApiClient.convertToType(data['with_metadata'], 'Boolean');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>LeaderboardsGetScoresRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>LeaderboardsGetScoresRequest</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of LeaderboardsGetScoresRequest.RequiredProperties) {
            if (!data[property]) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['leaderboard_name'] && !(typeof data['leaderboard_name'] === 'string' || data['leaderboard_name'] instanceof String)) {
            throw new Error("Expected the field `leaderboard_name` to be a primitive type in the JSON string but got " + data['leaderboard_name']);
        }
        // ensure the json data is a string
        if (data['range'] && !(typeof data['range'] === 'string' || data['range'] instanceof String)) {
            throw new Error("Expected the field `range` to be a primitive type in the JSON string but got " + data['range']);
        }
        // ensure the json data is a string
        if (data['user_id'] && !(typeof data['user_id'] === 'string' || data['user_id'] instanceof String)) {
            throw new Error("Expected the field `user_id` to be a primitive type in the JSON string but got " + data['user_id']);
        }

        return true;
    }


}

LeaderboardsGetScoresRequest.RequiredProperties = ["count", "leaderboard_name", "range"];

/**
 * Number of rankings to be displayed
 * @member {Number} count
 */
LeaderboardsGetScoresRequest.prototype['count'] = undefined;

/**
 * Name of the leaderboard
 * @member {String} leaderboard_name
 */
LeaderboardsGetScoresRequest.prototype['leaderboard_name'] = undefined;

/**
 * For recurring leaderboards, the offset from the latest occurrence of the leaderboard
 * @member {Number} offset
 */
LeaderboardsGetScoresRequest.prototype['offset'] = undefined;

/**
 * Range of the leaderboard requested: 'top', 'bottom' or 'around' the user specified
 * @member {module:snapser-apis/LeaderboardsGetScoresRequest.RangeEnum} range
 */
LeaderboardsGetScoresRequest.prototype['range'] = undefined;

/**
 * Optional user ID for the user who's standing is requested
 * @member {String} user_id
 */
LeaderboardsGetScoresRequest.prototype['user_id'] = undefined;

/**
 * Whether the user metadata should be included with the request
 * @member {Boolean} with_metadata
 */
LeaderboardsGetScoresRequest.prototype['with_metadata'] = undefined;





/**
 * Allowed values for the <code>range</code> property.
 * @enum {String}
 * @readonly
 */
LeaderboardsGetScoresRequest['RangeEnum'] = {

    /**
     * value: "top"
     * @const
     */
    "top": "top",

    /**
     * value: "bottom"
     * @const
     */
    "bottom": "bottom",

    /**
     * value: "around"
     * @const
     */
    "around": "around"
};



export default LeaderboardsGetScoresRequest;

