/**
 * cremebrulee
 * Your custom SDK
 *
 * The version of the OpenAPI document: cremebrulee: v1 SDK
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient.js";
import IncrementScoreRequest from '../snapser-apis/IncrementScoreRequest.js';
import LeaderboardsBatchGetScoresResponse from '../snapser-apis/LeaderboardsBatchGetScoresResponse.js';
import LeaderboardsBatchIncrementScoreRequest from '../snapser-apis/LeaderboardsBatchIncrementScoreRequest.js';
import LeaderboardsBatchIncrementScoreResponse from '../snapser-apis/LeaderboardsBatchIncrementScoreResponse.js';
import LeaderboardsBatchSetScoreRequest from '../snapser-apis/LeaderboardsBatchSetScoreRequest.js';
import LeaderboardsBatchSetScoreResponse from '../snapser-apis/LeaderboardsBatchSetScoreResponse.js';
import LeaderboardsGetScoresResponse from '../snapser-apis/LeaderboardsGetScoresResponse.js';
import LeaderboardsIncrementScoreResponse from '../snapser-apis/LeaderboardsIncrementScoreResponse.js';
import LeaderboardsSetScoreResponse from '../snapser-apis/LeaderboardsSetScoreResponse.js';
import SetScoreRequest from '../snapser-apis/SetScoreRequest.js';

/**
* LeaderboardsService service.
* @module snapser-models/LeaderboardsServiceApi
* @version cremebrulee: v1 SDK
*/
export default class LeaderboardsServiceApi {

    /**
    * Constructs a new LeaderboardsServiceApi. 
    * @alias module:snapser-models/LeaderboardsServiceApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the batchGetScores operation.
     * @callback module:snapser-models/LeaderboardsServiceApi~batchGetScoresCallback
     * @param {String} error Error message, if any.
     * @param {module:snapser-apis/LeaderboardsBatchGetScoresResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Score (App Auth)
     * Gets the standings within a leaderboard for multiple users
     * @param {Array.<String>} userIds List of user IDs for which scores are requested
     * @param {String} leaderboardName Name of the leaderboard
     * @param {String} token (app auth only)
     * @param {module:snapser-models/LeaderboardsServiceApi~batchGetScoresCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:snapser-apis/LeaderboardsBatchGetScoresResponse}
     */
    batchGetScores(userIds, leaderboardName, token, callback) {
      let postBody = null;
      // verify the required parameter 'userIds' is set
      if (userIds === undefined || userIds === null) {
        throw new Error("Missing the required parameter 'userIds' when calling batchGetScores");
      }
      // verify the required parameter 'leaderboardName' is set
      if (leaderboardName === undefined || leaderboardName === null) {
        throw new Error("Missing the required parameter 'leaderboardName' when calling batchGetScores");
      }
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling batchGetScores");
      }

      let pathParams = {
      };
      let queryParams = {
        'user_ids': this.apiClient.buildCollectionParam(userIds, 'multi'),
        'leaderboard_name': leaderboardName
      };
      let headerParams = {
        'Token': token
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = LeaderboardsBatchGetScoresResponse;
      return this.apiClient.callApi(
        '/v1/leaderboards/scores', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the batchIncrementScore operation.
     * @callback module:snapser-models/LeaderboardsServiceApi~batchIncrementScoreCallback
     * @param {String} error Error message, if any.
     * @param {module:snapser-apis/LeaderboardsBatchIncrementScoreResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Score (App Auth)
     * Increments the leaderboard scores for multiple users
     * @param {String} token (app auth only)
     * @param {module:snapser-apis/LeaderboardsBatchIncrementScoreRequest} body 
     * @param {module:snapser-models/LeaderboardsServiceApi~batchIncrementScoreCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:snapser-apis/LeaderboardsBatchIncrementScoreResponse}
     */
    batchIncrementScore(token, body, callback) {
      let postBody = body;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling batchIncrementScore");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling batchIncrementScore");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Token': token
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = LeaderboardsBatchIncrementScoreResponse;
      return this.apiClient.callApi(
        '/v1/leaderboards/scores', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the batchSetScore operation.
     * @callback module:snapser-models/LeaderboardsServiceApi~batchSetScoreCallback
     * @param {String} error Error message, if any.
     * @param {module:snapser-apis/LeaderboardsBatchSetScoreResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Score (App Auth)
     * Updates the score on the leaderboard for the logged in user (only non 'counter' leaderboards)
     * @param {String} token (app auth only)
     * @param {module:snapser-apis/LeaderboardsBatchSetScoreRequest} body 
     * @param {module:snapser-models/LeaderboardsServiceApi~batchSetScoreCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:snapser-apis/LeaderboardsBatchSetScoreResponse}
     */
    batchSetScore(token, body, callback) {
      let postBody = body;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling batchSetScore");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling batchSetScore");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Token': token
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = LeaderboardsBatchSetScoreResponse;
      return this.apiClient.callApi(
        '/v1/leaderboards/scores', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getScores operation.
     * @callback module:snapser-models/LeaderboardsServiceApi~getScoresCallback
     * @param {String} error Error message, if any.
     * @param {module:snapser-apis/LeaderboardsGetScoresResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Standings
     * Gets the standings within a leaderboard
     * @param {String} leaderboardName Name of the leaderboard
     * @param {String} range Range of the leaderboard requested: 'top', 'bottom' or 'around' the user specified
     * @param {Number} count Number of rankings to be displayed
     * @param {String} token User session token
     * @param {Object} opts Optional parameters
     * @param {String} [userId] Optional user ID for the user who's standing is requested
     * @param {Number} [offset] For recurring leaderboards, the offset from the latest occurrence of the leaderboard
     * @param {Boolean} [withMetadata] Whether the user metadata should be included with the request
     * @param {module:snapser-models/LeaderboardsServiceApi~getScoresCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:snapser-apis/LeaderboardsGetScoresResponse}
     */
    getScores(leaderboardName, range, count, token, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'leaderboardName' is set
      if (leaderboardName === undefined || leaderboardName === null) {
        throw new Error("Missing the required parameter 'leaderboardName' when calling getScores");
      }
      // verify the required parameter 'range' is set
      if (range === undefined || range === null) {
        throw new Error("Missing the required parameter 'range' when calling getScores");
      }
      // verify the required parameter 'count' is set
      if (count === undefined || count === null) {
        throw new Error("Missing the required parameter 'count' when calling getScores");
      }
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling getScores");
      }

      let pathParams = {
      };
      let queryParams = {
        'leaderboard_name': leaderboardName,
        'user_id': opts['userId'],
        'range': range,
        'count': count,
        'offset': opts['offset'],
        'with_metadata': opts['withMetadata']
      };
      let headerParams = {
        'Token': token
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = LeaderboardsGetScoresResponse;
      return this.apiClient.callApi(
        '/v1/leaderboards', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the incrementScore operation.
     * @callback module:snapser-models/LeaderboardsServiceApi~incrementScoreCallback
     * @param {String} error Error message, if any.
     * @param {module:snapser-apis/LeaderboardsIncrementScoreResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Score
     * Increments the leaderboard score for the user
     * @param {String} leaderboardName Name of the leaderboard
     * @param {String} userId User ID for the user who's score is being updated
     * @param {String} token User session token
     * @param {module:snapser-apis/IncrementScoreRequest} body 
     * @param {module:snapser-models/LeaderboardsServiceApi~incrementScoreCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:snapser-apis/LeaderboardsIncrementScoreResponse}
     */
    incrementScore(leaderboardName, userId, token, body, callback) {
      let postBody = body;
      // verify the required parameter 'leaderboardName' is set
      if (leaderboardName === undefined || leaderboardName === null) {
        throw new Error("Missing the required parameter 'leaderboardName' when calling incrementScore");
      }
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling incrementScore");
      }
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling incrementScore");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling incrementScore");
      }

      let pathParams = {
        'leaderboard_name': leaderboardName,
        'user_id': userId
      };
      let queryParams = {
      };
      let headerParams = {
        'Token': token
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = LeaderboardsIncrementScoreResponse;
      return this.apiClient.callApi(
        '/v1/leaderboards/{leaderboard_name}/user/{user_id}/score', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the setScore operation.
     * @callback module:snapser-models/LeaderboardsServiceApi~setScoreCallback
     * @param {String} error Error message, if any.
     * @param {module:snapser-apis/LeaderboardsSetScoreResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Score
     * Updates the leaderboard score for the user (only non 'counter' leaderboards)
     * @param {String} leaderboardName Name of the leaderboard
     * @param {String} userId User ID for the user who's score is being updated
     * @param {String} token User session token
     * @param {module:snapser-apis/SetScoreRequest} body 
     * @param {module:snapser-models/LeaderboardsServiceApi~setScoreCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:snapser-apis/LeaderboardsSetScoreResponse}
     */
    setScore(leaderboardName, userId, token, body, callback) {
      let postBody = body;
      // verify the required parameter 'leaderboardName' is set
      if (leaderboardName === undefined || leaderboardName === null) {
        throw new Error("Missing the required parameter 'leaderboardName' when calling setScore");
      }
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling setScore");
      }
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling setScore");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling setScore");
      }

      let pathParams = {
        'leaderboard_name': leaderboardName,
        'user_id': userId
      };
      let queryParams = {
      };
      let headerParams = {
        'Token': token
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = LeaderboardsSetScoreResponse;
      return this.apiClient.callApi(
        '/v1/leaderboards/{leaderboard_name}/user/{user_id}/score', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
