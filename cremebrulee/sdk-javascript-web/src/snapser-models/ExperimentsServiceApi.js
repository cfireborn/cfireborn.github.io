/**
 * cremebrulee
 * Your custom SDK
 *
 * The version of the OpenAPI document: cremebrulee: v1 SDK
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ExperimentsGetUserExperimentsResponse from '../snapser-apis/ExperimentsGetUserExperimentsResponse';
import ExperimentsUserExperiment from '../snapser-apis/ExperimentsUserExperiment';

/**
* ExperimentsService service.
* @module snapser-models/ExperimentsServiceApi
* @version cremebrulee: v1 SDK
*/
export default class ExperimentsServiceApi {

    /**
    * Constructs a new ExperimentsServiceApi. 
    * @alias module:snapser-models/ExperimentsServiceApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the getUserExperiment operation.
     * @callback module:snapser-models/ExperimentsServiceApi~getUserExperimentCallback
     * @param {String} error Error message, if any.
     * @param {module:snapser-apis/ExperimentsUserExperiment} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Experiment
     * Gets the user experiment for the user
     * @param {String} experimentName Name of the experiment
     * @param {String} userId User ID of the user
     * @param {String} token User session token
     * @param {module:snapser-models/ExperimentsServiceApi~getUserExperimentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:snapser-apis/ExperimentsUserExperiment}
     */
    getUserExperiment(experimentName, userId, token, callback) {
      let postBody = null;
      // verify the required parameter 'experimentName' is set
      if (experimentName === undefined || experimentName === null) {
        throw new Error("Missing the required parameter 'experimentName' when calling getUserExperiment");
      }
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling getUserExperiment");
      }
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling getUserExperiment");
      }

      let pathParams = {
        'experiment_name': experimentName,
        'user_id': userId
      };
      let queryParams = {
      };
      let headerParams = {
        'Token': token
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ExperimentsUserExperiment;
      return this.apiClient.callApi(
        '/v1/experiments/{experiment_name}/users/{user_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getUserExperiments operation.
     * @callback module:snapser-models/ExperimentsServiceApi~getUserExperimentsCallback
     * @param {String} error Error message, if any.
     * @param {module:snapser-apis/ExperimentsGetUserExperimentsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Experiments
     * Gets all user experiments for the user
     * @param {String} userId User ID of the user
     * @param {String} token User session token
     * @param {Object} opts Optional parameters
     * @param {Boolean} [includeInactiveExperiments] Whether to include inactive experiments
     * @param {module:snapser-models/ExperimentsServiceApi~getUserExperimentsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:snapser-apis/ExperimentsGetUserExperimentsResponse}
     */
    getUserExperiments(userId, token, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling getUserExperiments");
      }
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling getUserExperiments");
      }

      let pathParams = {
        'user_id': userId
      };
      let queryParams = {
        'include_inactive_experiments': opts['includeInactiveExperiments']
      };
      let headerParams = {
        'Token': token
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ExperimentsGetUserExperimentsResponse;
      return this.apiClient.callApi(
        '/v1/experiments/users/{user_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
