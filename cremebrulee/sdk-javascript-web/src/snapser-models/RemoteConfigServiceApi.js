/**
 * cremebrulee
 * Your custom SDK
 *
 * The version of the OpenAPI document: cremebrulee: v1 SDK
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import RemoteConfigGetAppConfigResponse from '../snapser-apis/RemoteConfigGetAppConfigResponse';
import RemoteConfigGetUserConfigResponse from '../snapser-apis/RemoteConfigGetUserConfigResponse';

/**
* RemoteConfigService service.
* @module snapser-models/RemoteConfigServiceApi
* @version cremebrulee: v1 SDK
*/
export default class RemoteConfigServiceApi {

    /**
    * Constructs a new RemoteConfigServiceApi. 
    * @alias module:snapser-models/RemoteConfigServiceApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the getAppConfig operation.
     * @callback module:snapser-models/RemoteConfigServiceApi~getAppConfigCallback
     * @param {String} error Error message, if any.
     * @param {module:snapser-apis/RemoteConfigGetAppConfigResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get App Config
     * Returns the config for the app
     * @param {String} version version of the app
     * @param {module:snapser-models/RemoteConfigServiceApi~getAppConfigCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:snapser-apis/RemoteConfigGetAppConfigResponse}
     */
    getAppConfig(version, callback) {
      let postBody = null;
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling getAppConfig");
      }

      let pathParams = {
        'version': version
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = RemoteConfigGetAppConfigResponse;
      return this.apiClient.callApi(
        '/v1/remote-config/app-config/{version}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getUserConfig operation.
     * @callback module:snapser-models/RemoteConfigServiceApi~getUserConfigCallback
     * @param {String} error Error message, if any.
     * @param {module:snapser-apis/RemoteConfigGetUserConfigResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get User Config
     * Returns the config for the user
     * @param {String} userId User ID of the user
     * @param {String} token User session token
     * @param {module:snapser-models/RemoteConfigServiceApi~getUserConfigCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:snapser-apis/RemoteConfigGetUserConfigResponse}
     */
    getUserConfig(userId, token, callback) {
      let postBody = null;
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling getUserConfig");
      }
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling getUserConfig");
      }

      let pathParams = {
        'user_id': userId
      };
      let queryParams = {
      };
      let headerParams = {
        'Token': token
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = RemoteConfigGetUserConfigResponse;
      return this.apiClient.callApi(
        '/v1/remote-config/user-config/{user_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
