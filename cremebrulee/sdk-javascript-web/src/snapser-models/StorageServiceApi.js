/**
 * cremebrulee
 * Your custom SDK
 *
 * The version of the OpenAPI document: cremebrulee: v1 SDK
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient.js";
import StorageBatchGetAppendBlobsResponse from '../snapser-apis/StorageBatchGetAppendBlobsResponse.js';
import StorageBatchGetBlobsResponse from '../snapser-apis/StorageBatchGetBlobsResponse.js';
import StorageBatchGetCountersResponse from '../snapser-apis/StorageBatchGetCountersResponse.js';
import StorageBatchIncrementCounterRequest from '../snapser-apis/StorageBatchIncrementCounterRequest.js';
import StorageBatchIncrementCounterResponse from '../snapser-apis/StorageBatchIncrementCounterResponse.js';
import StorageBatchInsertBlobRequest from '../snapser-apis/StorageBatchInsertBlobRequest.js';
import StorageBatchInsertBlobResponse from '../snapser-apis/StorageBatchInsertBlobResponse.js';
import StorageBatchReplaceBlobRequest from '../snapser-apis/StorageBatchReplaceBlobRequest.js';
import StorageBatchReplaceBlobResponse from '../snapser-apis/StorageBatchReplaceBlobResponse.js';
import StorageBatchUpdateAppendBlobRequest from '../snapser-apis/StorageBatchUpdateAppendBlobRequest.js';
import StorageBatchUpdateAppendBlobResponse from '../snapser-apis/StorageBatchUpdateAppendBlobResponse.js';
import StorageDeleteAppendBlobResponse from '../snapser-apis/StorageDeleteAppendBlobResponse.js';
import StorageDeleteBlobResponse from '../snapser-apis/StorageDeleteBlobResponse.js';
import StorageGetAppendBlobResponse from '../snapser-apis/StorageGetAppendBlobResponse.js';
import StorageGetBlobResponse from '../snapser-apis/StorageGetBlobResponse.js';
import StorageGetCasResponse from '../snapser-apis/StorageGetCasResponse.js';
import StorageGetCounterResponse from '../snapser-apis/StorageGetCounterResponse.js';
import StorageIncrementCounterResponse from '../snapser-apis/StorageIncrementCounterResponse.js';
import StorageInsertBlobResponse from '../snapser-apis/StorageInsertBlobResponse.js';
import StorageReplaceBlobResponse from '../snapser-apis/StorageReplaceBlobResponse.js';
import StorageResetCounterResponse from '../snapser-apis/StorageResetCounterResponse.js';
import StorageServiceIncrementCounterBody from '../snapser-apis/StorageServiceIncrementCounterBody.js';
import StorageServiceInsertBlobBody from '../snapser-apis/StorageServiceInsertBlobBody.js';
import StorageServiceReplaceBlobBody from '../snapser-apis/StorageServiceReplaceBlobBody.js';
import StorageServiceUpdateAppendBlobBody from '../snapser-apis/StorageServiceUpdateAppendBlobBody.js';
import StorageUpdateAppendBlobResponse from '../snapser-apis/StorageUpdateAppendBlobResponse.js';

/**
* StorageService service.
* @module snapser-models/StorageServiceApi
* @version cremebrulee: v1 SDK
*/
export default class StorageServiceApi {

    /**
    * Constructs a new StorageServiceApi. 
    * @alias module:snapser-models/StorageServiceApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the batchGetAppendBlobs operation.
     * @callback module:snapser-models/StorageServiceApi~batchGetAppendBlobsCallback
     * @param {String} error Error message, if any.
     * @param {module:snapser-apis/StorageBatchGetAppendBlobsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Append Blobs (App Auth)
     * Retrieve all append blobs for the owners
     * @param {module:snapser-apis/String} accessType Access to the append-blob. (public/protected/private)
     * @param {Array.<String>} ownerId Append-blob owners user IDs
     * @param {String} key Append-blob key
     * @param {String} token (app auth only)
     * @param {module:snapser-models/StorageServiceApi~batchGetAppendBlobsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:snapser-apis/StorageBatchGetAppendBlobsResponse}
     */
    batchGetAppendBlobs(accessType, ownerId, key, token, callback) {
      let postBody = null;
      // verify the required parameter 'accessType' is set
      if (accessType === undefined || accessType === null) {
        throw new Error("Missing the required parameter 'accessType' when calling batchGetAppendBlobs");
      }
      // verify the required parameter 'ownerId' is set
      if (ownerId === undefined || ownerId === null) {
        throw new Error("Missing the required parameter 'ownerId' when calling batchGetAppendBlobs");
      }
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling batchGetAppendBlobs");
      }
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling batchGetAppendBlobs");
      }

      let pathParams = {
      };
      let queryParams = {
        'access_type': accessType,
        'owner_id': this.apiClient.buildCollectionParam(ownerId, 'multi'),
        'key': key
      };
      let headerParams = {
        'Token': token
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = StorageBatchGetAppendBlobsResponse;
      return this.apiClient.callApi(
        '/v1/storage/append-blobs', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the batchGetBlobs operation.
     * @callback module:snapser-models/StorageServiceApi~batchGetBlobsCallback
     * @param {String} error Error message, if any.
     * @param {module:snapser-apis/StorageBatchGetBlobsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Blobs (App Auth)
     * Retrieve all blobs for the owners
     * @param {module:snapser-apis/String} accessType Access to the blob. (public/protected/private)
     * @param {Array.<String>} ownerId Blob owners user IDs
     * @param {String} key Blob key
     * @param {String} token (app auth only)
     * @param {module:snapser-models/StorageServiceApi~batchGetBlobsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:snapser-apis/StorageBatchGetBlobsResponse}
     */
    batchGetBlobs(accessType, ownerId, key, token, callback) {
      let postBody = null;
      // verify the required parameter 'accessType' is set
      if (accessType === undefined || accessType === null) {
        throw new Error("Missing the required parameter 'accessType' when calling batchGetBlobs");
      }
      // verify the required parameter 'ownerId' is set
      if (ownerId === undefined || ownerId === null) {
        throw new Error("Missing the required parameter 'ownerId' when calling batchGetBlobs");
      }
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling batchGetBlobs");
      }
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling batchGetBlobs");
      }

      let pathParams = {
      };
      let queryParams = {
        'access_type': accessType,
        'owner_id': this.apiClient.buildCollectionParam(ownerId, 'multi'),
        'key': key
      };
      let headerParams = {
        'Token': token
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = StorageBatchGetBlobsResponse;
      return this.apiClient.callApi(
        '/v1/storage/blobs', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the batchGetCounters operation.
     * @callback module:snapser-models/StorageServiceApi~batchGetCountersCallback
     * @param {String} error Error message, if any.
     * @param {module:snapser-apis/StorageBatchGetCountersResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Counters (App Auth)
     * Retrieve all counters for the owners
     * @param {module:snapser-apis/String} accessType Access to the counter. (public/protected/private)
     * @param {Array.<String>} ownerId Counter owners user IDs
     * @param {String} key Counter key
     * @param {String} token (app auth only)
     * @param {module:snapser-models/StorageServiceApi~batchGetCountersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:snapser-apis/StorageBatchGetCountersResponse}
     */
    batchGetCounters(accessType, ownerId, key, token, callback) {
      let postBody = null;
      // verify the required parameter 'accessType' is set
      if (accessType === undefined || accessType === null) {
        throw new Error("Missing the required parameter 'accessType' when calling batchGetCounters");
      }
      // verify the required parameter 'ownerId' is set
      if (ownerId === undefined || ownerId === null) {
        throw new Error("Missing the required parameter 'ownerId' when calling batchGetCounters");
      }
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling batchGetCounters");
      }
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling batchGetCounters");
      }

      let pathParams = {
      };
      let queryParams = {
        'access_type': accessType,
        'owner_id': this.apiClient.buildCollectionParam(ownerId, 'multi'),
        'key': key
      };
      let headerParams = {
        'Token': token
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = StorageBatchGetCountersResponse;
      return this.apiClient.callApi(
        '/v1/storage/counters', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the batchIncrementCounter operation.
     * @callback module:snapser-models/StorageServiceApi~batchIncrementCounterCallback
     * @param {String} error Error message, if any.
     * @param {module:snapser-apis/StorageBatchIncrementCounterResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Counters (App Auth)
     * Increment multiple counters
     * @param {String} token (app auth only)
     * @param {module:snapser-apis/StorageBatchIncrementCounterRequest} body 
     * @param {module:snapser-models/StorageServiceApi~batchIncrementCounterCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:snapser-apis/StorageBatchIncrementCounterResponse}
     */
    batchIncrementCounter(token, body, callback) {
      let postBody = body;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling batchIncrementCounter");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling batchIncrementCounter");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Token': token
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = StorageBatchIncrementCounterResponse;
      return this.apiClient.callApi(
        '/v1/storage/counters', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the batchInsertBlob operation.
     * @callback module:snapser-models/StorageServiceApi~batchInsertBlobCallback
     * @param {String} error Error message, if any.
     * @param {module:snapser-apis/StorageBatchInsertBlobResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Blob APIs (App Auth)
     * Inserts multiple blobs. Will fail if the key already exists
     * @param {String} token (app auth only)
     * @param {module:snapser-apis/StorageBatchInsertBlobRequest} body 
     * @param {module:snapser-models/StorageServiceApi~batchInsertBlobCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:snapser-apis/StorageBatchInsertBlobResponse}
     */
    batchInsertBlob(token, body, callback) {
      let postBody = body;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling batchInsertBlob");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling batchInsertBlob");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Token': token
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = StorageBatchInsertBlobResponse;
      return this.apiClient.callApi(
        '/v1/storage/blobs', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the batchReplaceBlob operation.
     * @callback module:snapser-models/StorageServiceApi~batchReplaceBlobCallback
     * @param {String} error Error message, if any.
     * @param {module:snapser-apis/StorageBatchReplaceBlobResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Blobs (App Auth)
     * Replace multiple blobs. Optionally insert if it doesn't exist
     * @param {String} token (app auth only)
     * @param {module:snapser-apis/StorageBatchReplaceBlobRequest} body 
     * @param {module:snapser-models/StorageServiceApi~batchReplaceBlobCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:snapser-apis/StorageBatchReplaceBlobResponse}
     */
    batchReplaceBlob(token, body, callback) {
      let postBody = body;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling batchReplaceBlob");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling batchReplaceBlob");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Token': token
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = StorageBatchReplaceBlobResponse;
      return this.apiClient.callApi(
        '/v1/storage/blobs', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the batchUpdateAppendBlob operation.
     * @callback module:snapser-models/StorageServiceApi~batchUpdateAppendBlobCallback
     * @param {String} error Error message, if any.
     * @param {module:snapser-apis/StorageBatchUpdateAppendBlobResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Append Blobs (App Auth)
     * Apend to the existing blobs. Create a new one if it doesn't exist
     * @param {String} token (app auth only)
     * @param {module:snapser-apis/StorageBatchUpdateAppendBlobRequest} body 
     * @param {module:snapser-models/StorageServiceApi~batchUpdateAppendBlobCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:snapser-apis/StorageBatchUpdateAppendBlobResponse}
     */
    batchUpdateAppendBlob(token, body, callback) {
      let postBody = body;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling batchUpdateAppendBlob");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling batchUpdateAppendBlob");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Token': token
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = StorageBatchUpdateAppendBlobResponse;
      return this.apiClient.callApi(
        '/v1/storage/append-blobs', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteAppendBlob operation.
     * @callback module:snapser-models/StorageServiceApi~deleteAppendBlobCallback
     * @param {String} error Error message, if any.
     * @param {module:snapser-apis/StorageDeleteAppendBlobResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Append Blobs
     * Deletes the append blob
     * @param {String} ownerId Append-blob owner's user ID
     * @param {String} accessType Access to the append-blob. (public/protected/private)
     * @param {String} key Append-blob key
     * @param {String} token User session token
     * @param {Object} opts Optional parameters
     * @param {String} [cas] Optional CAS value retrieved from the last operation. CAS mismatch will be ignored if not passed
     * @param {module:snapser-models/StorageServiceApi~deleteAppendBlobCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:snapser-apis/StorageDeleteAppendBlobResponse}
     */
    deleteAppendBlob(ownerId, accessType, key, token, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'ownerId' is set
      if (ownerId === undefined || ownerId === null) {
        throw new Error("Missing the required parameter 'ownerId' when calling deleteAppendBlob");
      }
      // verify the required parameter 'accessType' is set
      if (accessType === undefined || accessType === null) {
        throw new Error("Missing the required parameter 'accessType' when calling deleteAppendBlob");
      }
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling deleteAppendBlob");
      }
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling deleteAppendBlob");
      }

      let pathParams = {
        'owner_id': ownerId,
        'access_type': accessType,
        'key': key
      };
      let queryParams = {
        'cas': opts['cas']
      };
      let headerParams = {
        'Token': token
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = StorageDeleteAppendBlobResponse;
      return this.apiClient.callApi(
        '/v1/storage/owner/{owner_id}/{access_type}/append-blobs/{key}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteBlob operation.
     * @callback module:snapser-models/StorageServiceApi~deleteBlobCallback
     * @param {String} error Error message, if any.
     * @param {module:snapser-apis/StorageDeleteBlobResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Blobs
     * Delete a blob
     * @param {String} ownerId Blob owner's user ID
     * @param {String} accessType Access to the blob. (public/protected/private)
     * @param {String} key Blob key
     * @param {String} token User session token
     * @param {Object} opts Optional parameters
     * @param {String} [cas] Optional CAS value retrieved from the last operation. CAS mismatch will be ignored if not passed
     * @param {module:snapser-models/StorageServiceApi~deleteBlobCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:snapser-apis/StorageDeleteBlobResponse}
     */
    deleteBlob(ownerId, accessType, key, token, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'ownerId' is set
      if (ownerId === undefined || ownerId === null) {
        throw new Error("Missing the required parameter 'ownerId' when calling deleteBlob");
      }
      // verify the required parameter 'accessType' is set
      if (accessType === undefined || accessType === null) {
        throw new Error("Missing the required parameter 'accessType' when calling deleteBlob");
      }
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling deleteBlob");
      }
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling deleteBlob");
      }

      let pathParams = {
        'owner_id': ownerId,
        'access_type': accessType,
        'key': key
      };
      let queryParams = {
        'cas': opts['cas']
      };
      let headerParams = {
        'Token': token
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = StorageDeleteBlobResponse;
      return this.apiClient.callApi(
        '/v1/storage/owner/{owner_id}/{access_type}/blobs/{key}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getAppendBlob operation.
     * @callback module:snapser-models/StorageServiceApi~getAppendBlobCallback
     * @param {String} error Error message, if any.
     * @param {module:snapser-apis/StorageGetAppendBlobResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Append Blobs
     * Retrieve the value of an append blob
     * @param {String} ownerId Append-blob owner's user ID
     * @param {String} accessType Access to the append-blob. (public/protected/private)
     * @param {String} key Append-blob key
     * @param {String} token User session token
     * @param {module:snapser-models/StorageServiceApi~getAppendBlobCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:snapser-apis/StorageGetAppendBlobResponse}
     */
    getAppendBlob(ownerId, accessType, key, token, callback) {
      let postBody = null;
      // verify the required parameter 'ownerId' is set
      if (ownerId === undefined || ownerId === null) {
        throw new Error("Missing the required parameter 'ownerId' when calling getAppendBlob");
      }
      // verify the required parameter 'accessType' is set
      if (accessType === undefined || accessType === null) {
        throw new Error("Missing the required parameter 'accessType' when calling getAppendBlob");
      }
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling getAppendBlob");
      }
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling getAppendBlob");
      }

      let pathParams = {
        'owner_id': ownerId,
        'access_type': accessType,
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
        'Token': token
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = StorageGetAppendBlobResponse;
      return this.apiClient.callApi(
        '/v1/storage/owner/{owner_id}/{access_type}/append-blobs/{key}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getBlob operation.
     * @callback module:snapser-models/StorageServiceApi~getBlobCallback
     * @param {String} error Error message, if any.
     * @param {module:snapser-apis/StorageGetBlobResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Blobs
     * Retrieve the blob for the key
     * @param {String} ownerId Blob owner's user ID
     * @param {String} accessType Access to the blob. (public/protected/private)
     * @param {String} key Blob key
     * @param {String} token User session token
     * @param {module:snapser-models/StorageServiceApi~getBlobCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:snapser-apis/StorageGetBlobResponse}
     */
    getBlob(ownerId, accessType, key, token, callback) {
      let postBody = null;
      // verify the required parameter 'ownerId' is set
      if (ownerId === undefined || ownerId === null) {
        throw new Error("Missing the required parameter 'ownerId' when calling getBlob");
      }
      // verify the required parameter 'accessType' is set
      if (accessType === undefined || accessType === null) {
        throw new Error("Missing the required parameter 'accessType' when calling getBlob");
      }
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling getBlob");
      }
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling getBlob");
      }

      let pathParams = {
        'owner_id': ownerId,
        'access_type': accessType,
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
        'Token': token
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = StorageGetBlobResponse;
      return this.apiClient.callApi(
        '/v1/storage/owner/{owner_id}/{access_type}/blobs/{key}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getCas operation.
     * @callback module:snapser-models/StorageServiceApi~getCasCallback
     * @param {String} error Error message, if any.
     * @param {module:snapser-apis/StorageGetCasResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Cas
     * Retrieve the cas for the key
     * @param {String} ownerId Blob owner's user ID
     * @param {String} accessType Access to the blob. (public/protected/private)
     * @param {String} key Blob key
     * @param {String} token User session token
     * @param {module:snapser-models/StorageServiceApi~getCasCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:snapser-apis/StorageGetCasResponse}
     */
    getCas(ownerId, accessType, key, token, callback) {
      let postBody = null;
      // verify the required parameter 'ownerId' is set
      if (ownerId === undefined || ownerId === null) {
        throw new Error("Missing the required parameter 'ownerId' when calling getCas");
      }
      // verify the required parameter 'accessType' is set
      if (accessType === undefined || accessType === null) {
        throw new Error("Missing the required parameter 'accessType' when calling getCas");
      }
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling getCas");
      }
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling getCas");
      }

      let pathParams = {
        'owner_id': ownerId,
        'access_type': accessType,
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
        'Token': token
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = StorageGetCasResponse;
      return this.apiClient.callApi(
        '/v1/storage/owner/{owner_id}/{access_type}/cas/{key}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getCounter operation.
     * @callback module:snapser-models/StorageServiceApi~getCounterCallback
     * @param {String} error Error message, if any.
     * @param {module:snapser-apis/StorageGetCounterResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Counters
     * Retrieve a counter value
     * @param {String} ownerId Counter owner's user ID
     * @param {String} accessType Access to the counter. (public/protected/private)
     * @param {String} key Counter key
     * @param {String} token User session token
     * @param {module:snapser-models/StorageServiceApi~getCounterCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:snapser-apis/StorageGetCounterResponse}
     */
    getCounter(ownerId, accessType, key, token, callback) {
      let postBody = null;
      // verify the required parameter 'ownerId' is set
      if (ownerId === undefined || ownerId === null) {
        throw new Error("Missing the required parameter 'ownerId' when calling getCounter");
      }
      // verify the required parameter 'accessType' is set
      if (accessType === undefined || accessType === null) {
        throw new Error("Missing the required parameter 'accessType' when calling getCounter");
      }
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling getCounter");
      }
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling getCounter");
      }

      let pathParams = {
        'owner_id': ownerId,
        'access_type': accessType,
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
        'Token': token
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = StorageGetCounterResponse;
      return this.apiClient.callApi(
        '/v1/storage/owner/{owner_id}/{access_type}/counters/{key}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the incrementCounter operation.
     * @callback module:snapser-models/StorageServiceApi~incrementCounterCallback
     * @param {String} error Error message, if any.
     * @param {module:snapser-apis/StorageIncrementCounterResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Counters
     * Increment the counter
     * @param {String} ownerId Counter owner's user ID
     * @param {String} accessType Access to the counter. (public/protected/private)
     * @param {String} key Counter key
     * @param {String} token User session token
     * @param {module:snapser-apis/StorageServiceIncrementCounterBody} body 
     * @param {module:snapser-models/StorageServiceApi~incrementCounterCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:snapser-apis/StorageIncrementCounterResponse}
     */
    incrementCounter(ownerId, accessType, key, token, body, callback) {
      let postBody = body;
      // verify the required parameter 'ownerId' is set
      if (ownerId === undefined || ownerId === null) {
        throw new Error("Missing the required parameter 'ownerId' when calling incrementCounter");
      }
      // verify the required parameter 'accessType' is set
      if (accessType === undefined || accessType === null) {
        throw new Error("Missing the required parameter 'accessType' when calling incrementCounter");
      }
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling incrementCounter");
      }
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling incrementCounter");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling incrementCounter");
      }

      let pathParams = {
        'owner_id': ownerId,
        'access_type': accessType,
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
        'Token': token
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = StorageIncrementCounterResponse;
      return this.apiClient.callApi(
        '/v1/storage/owner/{owner_id}/{access_type}/counters/{key}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the insertBlob operation.
     * @callback module:snapser-models/StorageServiceApi~insertBlobCallback
     * @param {String} error Error message, if any.
     * @param {module:snapser-apis/StorageInsertBlobResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Blobs
     * Inserts a blob. Will fail if the key already exists
     * @param {String} ownerId Blob owner's user ID
     * @param {String} accessType Access to the blob. (public/protected/private)
     * @param {String} key Blob key
     * @param {String} token User session token
     * @param {module:snapser-apis/StorageServiceInsertBlobBody} body 
     * @param {module:snapser-models/StorageServiceApi~insertBlobCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:snapser-apis/StorageInsertBlobResponse}
     */
    insertBlob(ownerId, accessType, key, token, body, callback) {
      let postBody = body;
      // verify the required parameter 'ownerId' is set
      if (ownerId === undefined || ownerId === null) {
        throw new Error("Missing the required parameter 'ownerId' when calling insertBlob");
      }
      // verify the required parameter 'accessType' is set
      if (accessType === undefined || accessType === null) {
        throw new Error("Missing the required parameter 'accessType' when calling insertBlob");
      }
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling insertBlob");
      }
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling insertBlob");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling insertBlob");
      }

      let pathParams = {
        'owner_id': ownerId,
        'access_type': accessType,
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
        'Token': token
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = StorageInsertBlobResponse;
      return this.apiClient.callApi(
        '/v1/storage/owner/{owner_id}/{access_type}/blobs/{key}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the replaceBlob operation.
     * @callback module:snapser-models/StorageServiceApi~replaceBlobCallback
     * @param {String} error Error message, if any.
     * @param {module:snapser-apis/StorageReplaceBlobResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Blobs
     * Replace a blob. Optionally insert if it doesn't exist
     * @param {String} ownerId Blob owner's user ID
     * @param {String} accessType Access to the blob. (public/protected/private)
     * @param {String} key Blob key
     * @param {String} token User session token
     * @param {module:snapser-apis/StorageServiceReplaceBlobBody} body 
     * @param {module:snapser-models/StorageServiceApi~replaceBlobCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:snapser-apis/StorageReplaceBlobResponse}
     */
    replaceBlob(ownerId, accessType, key, token, body, callback) {
      let postBody = body;
      // verify the required parameter 'ownerId' is set
      if (ownerId === undefined || ownerId === null) {
        throw new Error("Missing the required parameter 'ownerId' when calling replaceBlob");
      }
      // verify the required parameter 'accessType' is set
      if (accessType === undefined || accessType === null) {
        throw new Error("Missing the required parameter 'accessType' when calling replaceBlob");
      }
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling replaceBlob");
      }
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling replaceBlob");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling replaceBlob");
      }

      let pathParams = {
        'owner_id': ownerId,
        'access_type': accessType,
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
        'Token': token
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = StorageReplaceBlobResponse;
      return this.apiClient.callApi(
        '/v1/storage/owner/{owner_id}/{access_type}/blobs/{key}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the resetCounter operation.
     * @callback module:snapser-models/StorageServiceApi~resetCounterCallback
     * @param {String} error Error message, if any.
     * @param {module:snapser-apis/StorageResetCounterResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Counters
     * Reset a counter value to 0
     * @param {String} ownerId Counter owner's user ID
     * @param {String} accessType Access to the counter. (public/protected/private)
     * @param {String} key Counter key
     * @param {String} token User session token
     * @param {module:snapser-models/StorageServiceApi~resetCounterCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:snapser-apis/StorageResetCounterResponse}
     */
    resetCounter(ownerId, accessType, key, token, callback) {
      let postBody = null;
      // verify the required parameter 'ownerId' is set
      if (ownerId === undefined || ownerId === null) {
        throw new Error("Missing the required parameter 'ownerId' when calling resetCounter");
      }
      // verify the required parameter 'accessType' is set
      if (accessType === undefined || accessType === null) {
        throw new Error("Missing the required parameter 'accessType' when calling resetCounter");
      }
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling resetCounter");
      }
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling resetCounter");
      }

      let pathParams = {
        'owner_id': ownerId,
        'access_type': accessType,
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
        'Token': token
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = StorageResetCounterResponse;
      return this.apiClient.callApi(
        '/v1/storage/owner/{owner_id}/{access_type}/counters/{key}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateAppendBlob operation.
     * @callback module:snapser-models/StorageServiceApi~updateAppendBlobCallback
     * @param {String} error Error message, if any.
     * @param {module:snapser-apis/StorageUpdateAppendBlobResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Append Blobs
     * Apend to the existing blob. Create a new one if it doesn't exist
     * @param {String} ownerId Append-blob owner's user ID
     * @param {String} accessType Access to the append-blob. (public/protected/private)
     * @param {String} key Append-blob key
     * @param {String} token User session token
     * @param {module:snapser-apis/StorageServiceUpdateAppendBlobBody} body 
     * @param {module:snapser-models/StorageServiceApi~updateAppendBlobCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:snapser-apis/StorageUpdateAppendBlobResponse}
     */
    updateAppendBlob(ownerId, accessType, key, token, body, callback) {
      let postBody = body;
      // verify the required parameter 'ownerId' is set
      if (ownerId === undefined || ownerId === null) {
        throw new Error("Missing the required parameter 'ownerId' when calling updateAppendBlob");
      }
      // verify the required parameter 'accessType' is set
      if (accessType === undefined || accessType === null) {
        throw new Error("Missing the required parameter 'accessType' when calling updateAppendBlob");
      }
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling updateAppendBlob");
      }
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling updateAppendBlob");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling updateAppendBlob");
      }

      let pathParams = {
        'owner_id': ownerId,
        'access_type': accessType,
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
        'Token': token
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = StorageUpdateAppendBlobResponse;
      return this.apiClient.callApi(
        '/v1/storage/owner/{owner_id}/{access_type}/append-blobs/{key}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
