/**
 * cremebrulee
 * Your custom SDK
 *
 * The version of the OpenAPI document: cremebrulee: v1 SDK
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import AnalyticsBatchCreateAppEventRequest from '../snapser-apis/AnalyticsBatchCreateAppEventRequest';
import AnalyticsBatchCreateEventResponse from '../snapser-apis/AnalyticsBatchCreateEventResponse';
import AnalyticsServerTime from '../snapser-apis/AnalyticsServerTime';
import AnalyticsServiceBatchCreateUserEventsBody from '../snapser-apis/AnalyticsServiceBatchCreateUserEventsBody';
import AnalyticsServiceCreateAppEventBody from '../snapser-apis/AnalyticsServiceCreateAppEventBody';
import AnalyticsServiceCreateUserEventBody from '../snapser-apis/AnalyticsServiceCreateUserEventBody';

/**
* AnalyticsService service.
* @module snapser-models/AnalyticsServiceApi
* @version cremebrulee: v1 SDK
*/
export default class AnalyticsServiceApi {

    /**
    * Constructs a new AnalyticsServiceApi. 
    * @alias module:snapser-models/AnalyticsServiceApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the batchCreateAppEvents operation.
     * @callback module:snapser-models/AnalyticsServiceApi~batchCreateAppEventsCallback
     * @param {String} error Error message, if any.
     * @param {module:snapser-apis/AnalyticsBatchCreateEventResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * App Events
     * Create a multiple batch events
     * @param {module:snapser-apis/AnalyticsBatchCreateAppEventRequest} body 
     * @param {module:snapser-models/AnalyticsServiceApi~batchCreateAppEventsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:snapser-apis/AnalyticsBatchCreateEventResponse}
     */
    batchCreateAppEvents(body, callback) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling batchCreateAppEvents");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = AnalyticsBatchCreateEventResponse;
      return this.apiClient.callApi(
        '/v1/analytics/app-events/events', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the batchCreateUserEvents operation.
     * @callback module:snapser-models/AnalyticsServiceApi~batchCreateUserEventsCallback
     * @param {String} error Error message, if any.
     * @param {module:snapser-apis/AnalyticsBatchCreateEventResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * User Events
     * Create multiple user events
     * @param {String} userId UserID of the affected user
     * @param {String} token User session token
     * @param {module:snapser-apis/AnalyticsServiceBatchCreateUserEventsBody} body 
     * @param {module:snapser-models/AnalyticsServiceApi~batchCreateUserEventsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:snapser-apis/AnalyticsBatchCreateEventResponse}
     */
    batchCreateUserEvents(userId, token, body, callback) {
      let postBody = body;
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling batchCreateUserEvents");
      }
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling batchCreateUserEvents");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling batchCreateUserEvents");
      }

      let pathParams = {
        'user_id': userId
      };
      let queryParams = {
      };
      let headerParams = {
        'Token': token
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = AnalyticsBatchCreateEventResponse;
      return this.apiClient.callApi(
        '/v1/analytics/user-events/{user_id}/events', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createAppEvent operation.
     * @callback module:snapser-models/AnalyticsServiceApi~createAppEventCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * App Events
     * Create a new app event
     * @param {String} event Event to be added
     * @param {module:snapser-apis/AnalyticsServiceCreateAppEventBody} body 
     * @param {module:snapser-models/AnalyticsServiceApi~createAppEventCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    createAppEvent(event, body, callback) {
      let postBody = body;
      // verify the required parameter 'event' is set
      if (event === undefined || event === null) {
        throw new Error("Missing the required parameter 'event' when calling createAppEvent");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling createAppEvent");
      }

      let pathParams = {
        'event': event
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/v1/analytics/app-events/{event}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createUserEvent operation.
     * @callback module:snapser-models/AnalyticsServiceApi~createUserEventCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * User Events
     * Create a new user event
     * @param {String} event Event to be added
     * @param {String} token User session token
     * @param {module:snapser-apis/AnalyticsServiceCreateUserEventBody} body 
     * @param {module:snapser-models/AnalyticsServiceApi~createUserEventCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    createUserEvent(event, token, body, callback) {
      let postBody = body;
      // verify the required parameter 'event' is set
      if (event === undefined || event === null) {
        throw new Error("Missing the required parameter 'event' when calling createUserEvent");
      }
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling createUserEvent");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling createUserEvent");
      }

      let pathParams = {
        'event': event
      };
      let queryParams = {
      };
      let headerParams = {
        'Token': token
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/v1/analytics/user-events/{event}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getServerTime operation.
     * @callback module:snapser-models/AnalyticsServiceApi~getServerTimeCallback
     * @param {String} error Error message, if any.
     * @param {module:snapser-apis/AnalyticsServerTime} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Server Time
     * Gets Server Time
     * @param {module:snapser-models/AnalyticsServiceApi~getServerTimeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:snapser-apis/AnalyticsServerTime}
     */
    getServerTime(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AnalyticsServerTime;
      return this.apiClient.callApi(
        '/v1/analytics/server-time', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
