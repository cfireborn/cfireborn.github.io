/**
 * cremebrulee
 * Your custom SDK
 *
 * The version of the OpenAPI document: cremebrulee: v1 SDK
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ProtobufAny from './ProtobufAny';

/**
 * The ApiHttpBody model module.
 * @module snapser-apis/ApiHttpBody
 * @version cremebrulee: v1 SDK
 */
class ApiHttpBody {
    /**
     * Constructs a new <code>ApiHttpBody</code>.
     * Message that represents an arbitrary HTTP body. It should only be used for payload formats that can&#39;t be represented as JSON, such as raw binary or an HTML page.   This message can be used both in streaming and non-streaming API methods in the request as well as the response.  It can be used as a top-level request field, which is convenient if one wants to extract parameters from either the URL or HTTP template into the request fields and also want access to the raw HTTP body.  Example:      message GetResourceRequest {       // A unique request id.       string request_id &#x3D; 1;        // The raw HTTP body is bound to this field.       google.api.HttpBody http_body &#x3D; 2;      }      service ResourceService {       rpc GetResource(GetResourceRequest)         returns (google.api.HttpBody);       rpc UpdateResource(google.api.HttpBody)         returns (google.protobuf.Empty);      }  Example with streaming methods:      service CaldavService {       rpc GetCalendar(stream google.api.HttpBody)         returns (stream google.api.HttpBody);       rpc UpdateCalendar(stream google.api.HttpBody)         returns (stream google.api.HttpBody);      }  Use of this type only changes how the request and response bodies are handled, all other features will continue to work unchanged.
     * @alias module:snapser-apis/ApiHttpBody
     */
    constructor() { 
        
        ApiHttpBody.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ApiHttpBody</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:snapser-apis/ApiHttpBody} obj Optional instance to populate.
     * @return {module:snapser-apis/ApiHttpBody} The populated <code>ApiHttpBody</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ApiHttpBody();

            if (data.hasOwnProperty('content_type')) {
                obj['content_type'] = ApiClient.convertToType(data['content_type'], 'String');
            }
            if (data.hasOwnProperty('data')) {
                obj['data'] = ApiClient.convertToType(data['data'], 'Blob');
            }
            if (data.hasOwnProperty('extensions')) {
                obj['extensions'] = ApiClient.convertToType(data['extensions'], [ProtobufAny]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ApiHttpBody</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ApiHttpBody</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['content_type'] && !(typeof data['content_type'] === 'string' || data['content_type'] instanceof String)) {
            throw new Error("Expected the field `content_type` to be a primitive type in the JSON string but got " + data['content_type']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['extensions'])) {
            throw new Error("Expected the field `extensions` to be an array in the JSON data but got " + data['extensions']);
        }

        return true;
    }


}



/**
 * The HTTP Content-Type header value specifying the content type of the body.
 * @member {String} content_type
 */
ApiHttpBody.prototype['content_type'] = undefined;

/**
 * The HTTP request/response body as raw binary.
 * @member {Blob} data
 */
ApiHttpBody.prototype['data'] = undefined;

/**
 * Application specific response metadata. Must be set in the first response for streaming APIs.
 * @member {Array.<module:snapser-apis/ProtobufAny>} extensions
 */
ApiHttpBody.prototype['extensions'] = undefined;






export default ApiHttpBody;

