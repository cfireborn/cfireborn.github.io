/**
 * cremebrulee
 * Your custom SDK
 *
 * The version of the OpenAPI document: cremebrulee: v1 SDK
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import AuthLoginTypeType from './AuthLoginTypeType';

/**
 * The AuthUser model module.
 * @module snapser-apis/AuthUser
 * @version cremebrulee: v1 SDK
 */
class AuthUser {
    /**
     * Constructs a new <code>AuthUser</code>.
     * @alias module:snapser-apis/AuthUser
     */
    constructor() { 
        
        AuthUser.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>AuthUser</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:snapser-apis/AuthUser} obj Optional instance to populate.
     * @return {module:snapser-apis/AuthUser} The populated <code>AuthUser</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new AuthUser();

            if (data.hasOwnProperty('created')) {
                obj['created'] = ApiClient.convertToType(data['created'], 'Boolean');
            }
            if (data.hasOwnProperty('created_at')) {
                obj['created_at'] = ApiClient.convertToType(data['created_at'], 'Number');
            }
            if (data.hasOwnProperty('first_login')) {
                obj['first_login'] = ApiClient.convertToType(data['first_login'], 'Number');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('is_banned')) {
                obj['is_banned'] = ApiClient.convertToType(data['is_banned'], 'Boolean');
            }
            if (data.hasOwnProperty('is_suspended')) {
                obj['is_suspended'] = ApiClient.convertToType(data['is_suspended'], 'Boolean');
            }
            if (data.hasOwnProperty('is_verified')) {
                obj['is_verified'] = ApiClient.convertToType(data['is_verified'], 'Boolean');
            }
            if (data.hasOwnProperty('login_types')) {
                obj['login_types'] = ApiClient.convertToType(data['login_types'], [AuthLoginTypeType]);
            }
            if (data.hasOwnProperty('refreshed_at')) {
                obj['refreshed_at'] = ApiClient.convertToType(data['refreshed_at'], 'Number');
            }
            if (data.hasOwnProperty('session_token')) {
                obj['session_token'] = ApiClient.convertToType(data['session_token'], 'String');
            }
            if (data.hasOwnProperty('suspended_until')) {
                obj['suspended_until'] = ApiClient.convertToType(data['suspended_until'], 'Number');
            }
            if (data.hasOwnProperty('tags')) {
                obj['tags'] = ApiClient.convertToType(data['tags'], ['String']);
            }
            if (data.hasOwnProperty('token_validity_seconds')) {
                obj['token_validity_seconds'] = ApiClient.convertToType(data['token_validity_seconds'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>AuthUser</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>AuthUser</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['login_types'])) {
            throw new Error("Expected the field `login_types` to be an array in the JSON data but got " + data['login_types']);
        }
        // ensure the json data is a string
        if (data['session_token'] && !(typeof data['session_token'] === 'string' || data['session_token'] instanceof String)) {
            throw new Error("Expected the field `session_token` to be a primitive type in the JSON string but got " + data['session_token']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['tags'])) {
            throw new Error("Expected the field `tags` to be an array in the JSON data but got " + data['tags']);
        }

        return true;
    }


}



/**
 * Whether user was created or not
 * @member {Boolean} created
 */
AuthUser.prototype['created'] = undefined;

/**
 * Unix timestamp of when the user was created
 * @member {Number} created_at
 */
AuthUser.prototype['created_at'] = undefined;

/**
 * Unix timestamp of when the user was first logged in
 * @member {Number} first_login
 */
AuthUser.prototype['first_login'] = undefined;

/**
 * User ID for the user
 * @member {String} id
 */
AuthUser.prototype['id'] = undefined;

/**
 * Whether user is banned or not
 * @member {Boolean} is_banned
 */
AuthUser.prototype['is_banned'] = undefined;

/**
 * Whether user is suspended or not
 * @member {Boolean} is_suspended
 */
AuthUser.prototype['is_suspended'] = undefined;

/**
 * Whether user is verified or not
 * @member {Boolean} is_verified
 */
AuthUser.prototype['is_verified'] = undefined;

/**
 * Login types
 * @member {Array.<module:snapser-apis/AuthLoginTypeType>} login_types
 */
AuthUser.prototype['login_types'] = undefined;

/**
 * Unix timestamp of when the session was last refreshed (If applicable)
 * @member {Number} refreshed_at
 */
AuthUser.prototype['refreshed_at'] = undefined;

/**
 * Session token of the user (If applicable)
 * @member {String} session_token
 */
AuthUser.prototype['session_token'] = undefined;

/**
 * Unix timestamp of when the user is suspended until
 * @member {Number} suspended_until
 */
AuthUser.prototype['suspended_until'] = undefined;

/**
 * Different tags attached to the user like flagged
 * @member {Array.<String>} tags
 */
AuthUser.prototype['tags'] = undefined;

/**
 * Validity of the token in seconds (If applicable)
 * @member {Number} token_validity_seconds
 */
AuthUser.prototype['token_validity_seconds'] = undefined;






export default AuthUser;

