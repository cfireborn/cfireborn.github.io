/**
 * cremebrulee
 * Your custom SDK
 *
 * The version of the OpenAPI document: cremebrulee: v1 SDK
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The StorageServiceReplaceBlobBody model module.
 * @module snapser-apis/StorageServiceReplaceBlobBody
 * @version cremebrulee: v1 SDK
 */
class StorageServiceReplaceBlobBody {
    /**
     * Constructs a new <code>StorageServiceReplaceBlobBody</code>.
     * @alias module:snapser-apis/StorageServiceReplaceBlobBody
     * @param value {String} Blob value to be inserted
     */
    constructor(value) { 
        
        StorageServiceReplaceBlobBody.initialize(this, value);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, value) { 
        obj['value'] = value;
    }

    /**
     * Constructs a <code>StorageServiceReplaceBlobBody</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:snapser-apis/StorageServiceReplaceBlobBody} obj Optional instance to populate.
     * @return {module:snapser-apis/StorageServiceReplaceBlobBody} The populated <code>StorageServiceReplaceBlobBody</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new StorageServiceReplaceBlobBody();

            if (data.hasOwnProperty('cas')) {
                obj['cas'] = ApiClient.convertToType(data['cas'], 'String');
            }
            if (data.hasOwnProperty('create')) {
                obj['create'] = ApiClient.convertToType(data['create'], 'Boolean');
            }
            if (data.hasOwnProperty('ttl')) {
                obj['ttl'] = ApiClient.convertToType(data['ttl'], 'Number');
            }
            if (data.hasOwnProperty('value')) {
                obj['value'] = ApiClient.convertToType(data['value'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>StorageServiceReplaceBlobBody</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>StorageServiceReplaceBlobBody</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of StorageServiceReplaceBlobBody.RequiredProperties) {
            if (!data[property]) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['cas'] && !(typeof data['cas'] === 'string' || data['cas'] instanceof String)) {
            throw new Error("Expected the field `cas` to be a primitive type in the JSON string but got " + data['cas']);
        }
        // ensure the json data is a string
        if (data['value'] && !(typeof data['value'] === 'string' || data['value'] instanceof String)) {
            throw new Error("Expected the field `value` to be a primitive type in the JSON string but got " + data['value']);
        }

        return true;
    }


}

StorageServiceReplaceBlobBody.RequiredProperties = ["value"];

/**
 * CAS value retrieved from the last operation
 * @member {String} cas
 */
StorageServiceReplaceBlobBody.prototype['cas'] = undefined;

/**
 * Whether the blob should be created if it doesn't exist
 * @member {Boolean} create
 */
StorageServiceReplaceBlobBody.prototype['create'] = undefined;

/**
 * Optional TTL for the blob
 * @member {Number} ttl
 */
StorageServiceReplaceBlobBody.prototype['ttl'] = undefined;

/**
 * Blob value to be inserted
 * @member {String} value
 */
StorageServiceReplaceBlobBody.prototype['value'] = undefined;






export default StorageServiceReplaceBlobBody;

