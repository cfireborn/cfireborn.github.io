/**
 * cremebrulee
 * Your custom SDK
 *
 * The version of the OpenAPI document: cremebrulee: v1 SDK
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The StorageIncrementCounterRequest model module.
 * @module snapser-apis/StorageIncrementCounterRequest
 * @version cremebrulee: v1 SDK
 */
class StorageIncrementCounterRequest {
    /**
     * Constructs a new <code>StorageIncrementCounterRequest</code>.
     * @alias module:snapser-apis/StorageIncrementCounterRequest
     * @param accessType {module:snapser-apis/StorageIncrementCounterRequest.AccessTypeEnum} Access to the counter. (public/protected/private)
     * @param count {Number} Value to increment the counter by. Use negative to decrement
     * @param key {String} Counter key
     * @param ownerId {String} Counter owner's user ID
     */
    constructor(accessType, count, key, ownerId) { 
        
        StorageIncrementCounterRequest.initialize(this, accessType, count, key, ownerId);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, accessType, count, key, ownerId) { 
        obj['access_type'] = accessType;
        obj['count'] = count;
        obj['key'] = key;
        obj['owner_id'] = ownerId;
    }

    /**
     * Constructs a <code>StorageIncrementCounterRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:snapser-apis/StorageIncrementCounterRequest} obj Optional instance to populate.
     * @return {module:snapser-apis/StorageIncrementCounterRequest} The populated <code>StorageIncrementCounterRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new StorageIncrementCounterRequest();

            if (data.hasOwnProperty('access_type')) {
                obj['access_type'] = ApiClient.convertToType(data['access_type'], 'String');
            }
            if (data.hasOwnProperty('count')) {
                obj['count'] = ApiClient.convertToType(data['count'], 'Number');
            }
            if (data.hasOwnProperty('key')) {
                obj['key'] = ApiClient.convertToType(data['key'], 'String');
            }
            if (data.hasOwnProperty('owner_id')) {
                obj['owner_id'] = ApiClient.convertToType(data['owner_id'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>StorageIncrementCounterRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>StorageIncrementCounterRequest</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of StorageIncrementCounterRequest.RequiredProperties) {
            if (!data[property]) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['access_type'] && !(typeof data['access_type'] === 'string' || data['access_type'] instanceof String)) {
            throw new Error("Expected the field `access_type` to be a primitive type in the JSON string but got " + data['access_type']);
        }
        // ensure the json data is a string
        if (data['key'] && !(typeof data['key'] === 'string' || data['key'] instanceof String)) {
            throw new Error("Expected the field `key` to be a primitive type in the JSON string but got " + data['key']);
        }
        // ensure the json data is a string
        if (data['owner_id'] && !(typeof data['owner_id'] === 'string' || data['owner_id'] instanceof String)) {
            throw new Error("Expected the field `owner_id` to be a primitive type in the JSON string but got " + data['owner_id']);
        }

        return true;
    }


}

StorageIncrementCounterRequest.RequiredProperties = ["access_type", "count", "key", "owner_id"];

/**
 * Access to the counter. (public/protected/private)
 * @member {module:snapser-apis/StorageIncrementCounterRequest.AccessTypeEnum} access_type
 */
StorageIncrementCounterRequest.prototype['access_type'] = undefined;

/**
 * Value to increment the counter by. Use negative to decrement
 * @member {Number} count
 */
StorageIncrementCounterRequest.prototype['count'] = undefined;

/**
 * Counter key
 * @member {String} key
 */
StorageIncrementCounterRequest.prototype['key'] = undefined;

/**
 * Counter owner's user ID
 * @member {String} owner_id
 */
StorageIncrementCounterRequest.prototype['owner_id'] = undefined;





/**
 * Allowed values for the <code>access_type</code> property.
 * @enum {String}
 * @readonly
 */
StorageIncrementCounterRequest['AccessTypeEnum'] = {

    /**
     * value: "public"
     * @const
     */
    "public": "public",

    /**
     * value: "private"
     * @const
     */
    "private": "private",

    /**
     * value: "protected"
     * @const
     */
    "protected": "protected"
};



export default StorageIncrementCounterRequest;

